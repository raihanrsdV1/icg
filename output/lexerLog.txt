Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme fact
Line# 1: Token <LPAREN> Lexeme (
Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme n
Line# 1: Token <RPAREN> Lexeme )
Line# 1: Token <LCURL> Lexeme {
Line# 2: Token <IF> Lexeme if
Line# 2: Token <LPAREN> Lexeme (
Line# 2: Token <ID> Lexeme n
Line# 2: Token <CONST_INT> Lexeme 0
Line# 2: Token <RPAREN> Lexeme )
Line# 2: Token <LCURL> Lexeme {
Line# 3: Token <RETURN> Lexeme return
Line# 3: Token <CONST_INT> Lexeme 1
Line# 3: Token <SEMICOLON> Lexeme ;
Line# 4: Token <RCURL> Lexeme }
Line# 5: Token <RETURN> Lexeme return
Line# 5: Token <ID> Lexeme fact
Line# 5: Token <LPAREN> Lexeme (
Line# 5: Token <ID> Lexeme n
Line# 5: Token <ADDOP> Lexeme -
Line# 5: Token <CONST_INT> Lexeme 1
Line# 5: Token <RPAREN> Lexeme )
Line# 5: Token <MULOP> Lexeme *
Line# 5: Token <ID> Lexeme n
Line# 5: Token <SEMICOLON> Lexeme ;
Line# 6: Token <RCURL> Lexeme }
Line# 8: Token <INT> Lexeme int
Line# 8: Token <ID> Lexeme x
Line# 8: Token <SEMICOLON> Lexeme ;
Line# 9: Token <VOID> Lexeme void
Line# 9: Token <ID> Lexeme h
Line# 9: Token <LPAREN> Lexeme (
Line# 9: Token <RPAREN> Lexeme )
Line# 9: Token <SEMICOLON> Lexeme ;
Line# 10: Token <INT> Lexeme int
Line# 10: Token <ID> Lexeme foo
Line# 10: Token <LPAREN> Lexeme (
Line# 10: Token <INT> Lexeme int
Line# 10: Token <ID> Lexeme a
Line# 10: Token <COMMA> Lexeme ,
Line# 10: Token <INT> Lexeme int
Line# 10: Token <ID> Lexeme b
Line# 10: Token <RPAREN> Lexeme )
Line# 10: Token <SEMICOLON> Lexeme ;
Line# 12: Token <INT> Lexeme int
Line# 12: Token <ID> Lexeme foo
Line# 12: Token <LPAREN> Lexeme (
Line# 12: Token <INT> Lexeme int
Line# 12: Token <ID> Lexeme a
Line# 12: Token <COMMA> Lexeme ,
Line# 12: Token <INT> Lexeme int
Line# 12: Token <ID> Lexeme b
Line# 12: Token <RPAREN> Lexeme )
Line# 12: Token <LCURL> Lexeme {
Line# 13: Token <IF> Lexeme if
Line# 13: Token <LPAREN> Lexeme (
Line# 13: Token <ID> Lexeme a
Line# 13: Token <ADDOP> Lexeme +
Line# 13: Token <ID> Lexeme b
Line# 13: Token <CONST_INT> Lexeme 5
Line# 13: Token <RPAREN> Lexeme )
Line# 13: Token <LCURL> Lexeme {
Line# 14: Token <RETURN> Lexeme return
Line# 14: Token <CONST_INT> Lexeme 7
Line# 14: Token <SEMICOLON> Lexeme ;
Line# 15: Token <RCURL> Lexeme }
Line# 16: Token <RETURN> Lexeme return
Line# 16: Token <ID> Lexeme foo
Line# 16: Token <LPAREN> Lexeme (
Line# 16: Token <ID> Lexeme a
Line# 16: Token <ADDOP> Lexeme -
Line# 16: Token <CONST_INT> Lexeme 2
Line# 16: Token <COMMA> Lexeme ,
Line# 16: Token <ID> Lexeme b
Line# 16: Token <ADDOP> Lexeme -
Line# 16: Token <CONST_INT> Lexeme 1
Line# 16: Token <RPAREN> Lexeme )
Line# 16: Token <ADDOP> Lexeme +
Line# 16: Token <CONST_INT> Lexeme 2
Line# 16: Token <MULOP> Lexeme *
Line# 16: Token <ID> Lexeme foo
Line# 16: Token <LPAREN> Lexeme (
Line# 16: Token <ID> Lexeme a
Line# 16: Token <ADDOP> Lexeme -
Line# 16: Token <CONST_INT> Lexeme 1
Line# 16: Token <COMMA> Lexeme ,
Line# 16: Token <ID> Lexeme b
Line# 16: Token <ADDOP> Lexeme -
Line# 16: Token <CONST_INT> Lexeme 2
Line# 16: Token <RPAREN> Lexeme )
Line# 16: Token <SEMICOLON> Lexeme ;
Line# 17: Token <RCURL> Lexeme }
Line# 19: Token <INT> Lexeme int
Line# 19: Token <ID> Lexeme y
Line# 19: Token <LTHIRD> Lexeme [
Line# 19: Token <CONST_INT> Lexeme 5
Line# 19: Token <RTHIRD> Lexeme ]
Line# 19: Token <SEMICOLON> Lexeme ;
Line# 21: Token <VOID> Lexeme void
Line# 21: Token <ID> Lexeme h
Line# 21: Token <LPAREN> Lexeme (
Line# 21: Token <RPAREN> Lexeme )
Line# 21: Token <LCURL> Lexeme {
Line# 22: Token <INT> Lexeme int
Line# 22: Token <ID> Lexeme y
Line# 22: Token <SEMICOLON> Lexeme ;
Line# 23: Token <ID> Lexeme y
Line# 23: Token <ASSIGNOP> Lexeme =
Line# 23: Token <CONST_INT> Lexeme 22
Line# 23: Token <SEMICOLON> Lexeme ;
Line# 24: Token <PRINTLN> Lexeme println
Line# 24: Token <LPAREN> Lexeme (
Line# 24: Token <ID> Lexeme y
Line# 24: Token <RPAREN> Lexeme )
Line# 24: Token <SEMICOLON> Lexeme ;
Line# 25: Token <RCURL> Lexeme }
Line# 27: Token <VOID> Lexeme void
Line# 27: Token <ID> Lexeme g
Line# 27: Token <LPAREN> Lexeme (
Line# 27: Token <RPAREN> Lexeme )
Line# 27: Token <LCURL> Lexeme {
Line# 29: Token <RCURL> Lexeme }
Line# 31: Token <INT> Lexeme int
Line# 31: Token <ID> Lexeme gg
Line# 31: Token <LPAREN> Lexeme (
Line# 31: Token <INT> Lexeme int
Line# 31: Token <ID> Lexeme a
Line# 31: Token <COMMA> Lexeme ,
Line# 31: Token <INT> Lexeme int
Line# 31: Token <ID> Lexeme b
Line# 31: Token <RPAREN> Lexeme )
Line# 31: Token <LCURL> Lexeme {
Line# 32: Token <RETURN> Lexeme return
Line# 32: Token <ID> Lexeme a
Line# 32: Token <MULOP> Lexeme %
Line# 32: Token <ID> Lexeme b
Line# 32: Token <SEMICOLON> Lexeme ;
Line# 33: Token <RCURL> Lexeme }
Line# 34: Token <INT> Lexeme int
Line# 34: Token <ID> Lexeme i
Line# 34: Token <SEMICOLON> Lexeme ;
Line# 35: Token <VOID> Lexeme void
Line# 35: Token <ID> Lexeme hh
Line# 35: Token <LPAREN> Lexeme (
Line# 35: Token <RPAREN> Lexeme )
Line# 35: Token <LCURL> Lexeme {
Line# 36: Token <FOR> Lexeme for
Line# 36: Token <LPAREN> Lexeme (
Line# 36: Token <ID> Lexeme i
Line# 36: Token <ASSIGNOP> Lexeme =
Line# 36: Token <CONST_INT> Lexeme 0
Line# 36: Token <SEMICOLON> Lexeme ;
Line# 36: Token <ID> Lexeme i
Line# 36: Token <CONST_INT> Lexeme 5
Line# 36: Token <SEMICOLON> Lexeme ;
Line# 36: Token <ID> Lexeme i
Line# 36: Token <INCOP> Lexeme ++
Line# 36: Token <RPAREN> Lexeme )
Line# 36: Token <LCURL> Lexeme {
Line# 37: Token <ID> Lexeme y
Line# 37: Token <LTHIRD> Lexeme [
Line# 37: Token <ID> Lexeme i
Line# 37: Token <RTHIRD> Lexeme ]
Line# 37: Token <ASSIGNOP> Lexeme =
Line# 37: Token <CONST_INT> Lexeme 101
Line# 37: Token <ADDOP> Lexeme +
Line# 37: Token <ID> Lexeme i
Line# 37: Token <SEMICOLON> Lexeme ;
